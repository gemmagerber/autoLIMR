% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/heidel_diag.R
\name{heidel_diag}
\alias{heidel_diag}
\title{heidel_diag(): Heidelberger and Welch’s convergence diagnostic}
\usage{
heidel_diag(x, flow = NULL, eps = 0.1, pvalue = 0.05, ...)
}
\arguments{
\item{x}{Object of class "multi_net_output" generated from
autoLIMR::multi_net() function.}

\item{flow}{Character argument. By default, flow = NULL, and the convergence
diagnostics are returned for each Markov Chain variable. If convergence
diagnostics are required for one Markov chain variable only,
it can be specified as a character string e.g., flow = "Plant_GPP".
We suggest leaving the default flow = NULL.}

\item{eps}{Target value for ratio of halfwidth to sample mean}

\item{pvalue}{significance level to use}

\item{...}{Other arguments from coda::heidel.diag()}
}
\value{
Data frame with each row corresponding to one Markov chain variable,
and columns describing Heidelberger-Welch diagnostics. Includes
1) if the variable passes the Stationarity test ("HW.Stationarity.Test"),
2) starting iteration ("HW.Start.Iteration"),
3) p-value ("HW.p.value"),
4) halfwidth test evaluation ("HW.Halfwidth.Test"),
5) halfwidth mean ("HW.Mean"), and
6) halfwidth value ("HW.Halfwidth.Value").
}
\description{
Function to calculate Heidelberger and Welch’s
convergence diagnostic for autoLIMR Markov chains.
Based on coda::heidel.diag() function (Plummer et al., 2020).
}
\examples{
# Heidelberger and Welch’s convergence diagnostic of
# variables in object "multi_net_output"
# generated from autoLIMR::multi_net().

# The example LIM Declaration files can be found in the package folder
# "example_limfiles". If using a custom LIM Declaration file, users can
# save the LIM Declaration file in the working directory and refer directly
# within the function e.g., file = "mylimfile.R".
# If the LIM Declaration file is not saved in the
# working directory, the function will accept a valid file path.

fpath <- system.file("example_limfiles",
  "Winter_Weighted_Network_LIMfile.R",
  package = "autoLIMR"
)
set.seed(1)
x <- multi_net(
  file = fpath,
  iter = 1000,
  jmp = NULL,
  x0 = NULL
)
heidel_diag(x = x)
heidel_diag(x = x, flow = "Plant_GPP")

}
